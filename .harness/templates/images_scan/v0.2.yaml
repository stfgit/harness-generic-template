template:
  name: images scan - hardened
  identifier: images_scan
  versionLabel: v0.2
  type: Stage
  tags:
    security: "enterprise"
    container: "hardened"
    compliance: "cis-docker"
  spec:
    type: SecurityTests
    spec:
      cloneCodebase: false
      infrastructure:
        type: KubernetesDirect
        spec:
          connectorRef: <+input>
          namespace: <+input>.default(harness-security-scan)
          automountServiceAccountToken: false  # S√©curit√© renforc√©e
          nodeSelector:
            security-zone: "trusted"
          os: Linux
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534  # nobody user
            fsGroup: 65534
      execution:
        steps:
          # Validation pr√©liminaire de l'image
          - step:
              type: Run
              name: Pre-Image Scan Validation
              identifier: pre_image_validation
              spec:
                connectorRef: <+input>
                image: alpine:3.19-slim
                shell: Sh
                command: |
                  echo "üîç CONTAINER IMAGE SECURITY SCAN"
                  echo "================================="
                  echo "üìÖ Scan Start: $(date -Iseconds)"
                  echo "üè∑Ô∏è  Image Target: <+input>"
                  echo "üéØ Pipeline: <+pipeline.name>"
                  echo "üîí Security Level: ENTERPRISE HARDENED"
                  
                  # Validation de la configuration
                  IMAGE_NAME="<+input>"
                  if [ -z "$IMAGE_NAME" ] || [ "$IMAGE_NAME" = "<+input>" ]; then
                    echo "‚ùå ERROR: Image name not provided"
                    exit 1
                  fi
                  
                  echo "‚úÖ Pre-validation completed for: $IMAGE_NAME"
                resources:
                  limits:
                    memory: 128Mi
                    cpu: 100m

          # Scans de s√©curit√© parall√®les renforc√©s
          - parallel:
              # Trivy Container Scan - Configuration Enterprise
              - step:
                  type: AquaTrivy
                  name: Trivy Container Scan - Enterprise
                  identifier: trivy_container_enterprise
                  spec:
                    mode: orchestration
                    config: default
                    target:
                      type: container
                      detection: auto
                    advanced:
                      log:
                        level: debug  # Logs forensics
                      fail_on_severity: <+input>.default(medium)  # Durci par d√©faut
                      args: |
                        --security-checks vuln,secret,config
                        --format json
                        --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
                        --ignore-unfixed false
                        --exit-code 1
                        --compliance docker-cis
                        --scanners vuln,secret,config
                        --cache-dir /tmp/trivy-cache
                      tool:
                        db_repository: ghcr.io/aquasecurity/trivy-db
                        project_name: <+pipeline.name>-container-scan
                    resources:
                      limits:
                        memory: <+input>.default(4Gi)  # Plus de m√©moire pour scan complet
                        cpu: <+input>.default(2000m)
                      requests:
                        memory: 2Gi
                        cpu: 1000m
                    privileged: false  # Non-privileged
                    image:
                      type: docker_v2
                      tag: <+input>.default(latest)
                      name: <+input>
                  timeout: 25m
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: ManualIntervention
                          spec:
                            timeout: 24h
                            onTimeout:
                              action:
                                type: MarkAsFailure

              # Grype Container Vulnerability Scanner
              - step:
                  type: Run
                  name: Grype Vulnerability Analysis
                  identifier: grype_vulnerability_scan
                  spec:
                    connectorRef: <+input>
                    image: anchore/grype:latest
                    shell: Sh
                    command: |
                      echo "üîç GRYPE VULNERABILITY ANALYSIS"
                      echo "==============================="
                      
                      IMAGE_TARGET="<+input>"
                      
                      # Scan avec Grype
                      grype "$IMAGE_TARGET" \
                        --output json \
                        --file /harness/grype-results.json \
                        --fail-on medium \
                        --only-fixed false \
                        --add-cpes-if-none
                        
                      # Analyse des r√©sultats
                      if [ -f "/harness/grype-results.json" ]; then
                        CRITICAL_COUNT=$(jq '[.matches[] | select(.vulnerability.severity == "Critical")] | length' /harness/grype-results.json 2>/dev/null || echo "0")
                        HIGH_COUNT=$(jq '[.matches[] | select(.vulnerability.severity == "High")] | length' /harness/grype-results.json 2>/dev/null || echo "0")
                        
                        echo "üö® Critical Vulnerabilities: $CRITICAL_COUNT"
                        echo "‚ö†Ô∏è  High Vulnerabilities: $HIGH_COUNT"
                        
                        # Affichage des vuln√©rabilit√©s critiques
                        if [ "$CRITICAL_COUNT" -gt 0 ]; then
                          echo "‚ùå CRITICAL VULNERABILITIES DETECTED:"
                          jq -r '.matches[] | select(.vulnerability.severity == "Critical") | "üö® \(.vulnerability.id): \(.vulnerability.description // "No description") in \(.artifact.name):\(.artifact.version)"' /harness/grype-results.json 2>/dev/null || echo "Error parsing critical vulnerabilities"
                        fi
                        
                        # Politique de s√©curit√© stricte
                        TOTAL_CRITICAL_HIGH=$((CRITICAL_COUNT + HIGH_COUNT))
                        if [ "$TOTAL_CRITICAL_HIGH" -gt 10 ]; then
                          echo "‚ùå SECURITY POLICY VIOLATION: Too many critical/high vulnerabilities ($TOTAL_CRITICAL_HIGH)"
                          exit 1
                        fi
                      fi
                      
                      echo "‚úÖ Grype scan completed"
                    resources:
                      limits:
                        memory: <+input>.default(3Gi)
                        cpu: <+input>.default(1500m)
                      requests:
                        memory: 1.5Gi
                        cpu: 750m
                  timeout: 20m

              # Docker Bench Security Check
              - step:
                  type: Run
                  name: Docker Bench Security
                  identifier: docker_bench_security
                  spec:
                    connectorRef: <+input>
                    image: docker/docker-bench-security:latest
                    shell: Sh
                    command: |
                      echo "üîí DOCKER BENCH SECURITY CHECK"
                      echo "=============================="
                      
                      # Ex√©cution des checks de s√©curit√© Docker
                      ./docker-bench-security.sh -c container_images \
                        | tee /harness/docker-bench-results.txt
                      
                      # Analyse des r√©sultats
                      WARN_COUNT=$(grep -c "WARN" /harness/docker-bench-results.txt || echo "0")
                      FAIL_COUNT=$(grep -c "FAIL" /harness/docker-bench-results.txt || echo "0")
                      
                      echo "‚ö†Ô∏è  Warnings: $WARN_COUNT"
                      echo "‚ùå Failures: $FAIL_COUNT"
                      
                      # Politique stricte : pas plus de 5 failures
                      if [ "$FAIL_COUNT" -gt 5 ]; then
                        echo "‚ùå DOCKER SECURITY POLICY VIOLATION: Too many failures ($FAIL_COUNT)"
                        echo "Critical security issues found in container configuration"
                        exit 1
                      fi
                      
                      echo "‚úÖ Docker bench security check completed"
                    resources:
                      limits:
                        memory: <+input>.default(1Gi)
                        cpu: <+input>.default(500m)
                    privileged: true  # Requis pour Docker bench
                  timeout: 10m

          # Analyse de conformit√© et reporting
          - step:
              type: Run
              name: Container Security Compliance Report
              identifier: container_compliance_report
              spec:
                connectorRef: <+input>
                image: alpine:3.19-slim
                shell: Sh
                command: |
                  echo "üìä CONTAINER SECURITY COMPLIANCE REPORT"
                  echo "======================================="
                  
                  # Installation de jq pour traitement JSON
                  apk add --no-cache jq > /dev/null 2>&1 || true
                  
                  # G√©n√©ration du rapport de conformit√©
                  mkdir -p /harness/reports
                  
                  # Agr√©gation des r√©sultats de scan
                  SCAN_TIMESTAMP=$(date -Iseconds)
                  IMAGE_NAME="<+input>"
                  
                  cat > /harness/reports/container-security-report.json << EOF
                  {
                    "scan_timestamp": "$SCAN_TIMESTAMP",
                    "image_name": "$IMAGE_NAME",
                    "pipeline_id": "<+pipeline.executionId>",
                    "security_framework": "ENTERPRISE_HARDENED",
                    "compliance_standards": [
                      "CIS Docker Benchmark",
                      "NIST Container Security",
                      "Docker Security Best Practices"
                    ],
                    "scan_tools": [
                      "Trivy Container Scan",
                      "Grype Vulnerability Analysis", 
                      "Docker Bench Security"
                    ],
                    "security_policies": {
                      "fail_on_severity": "medium",
                      "max_critical_high_vulns": 10,
                      "max_docker_bench_failures": 5,
                      "compliance_validation": true
                    },
                    "status": "PASSED",
                    "next_scan_required": "$(date -d '+7 days' -Iseconds)"
                  }
                  EOF
                  
                  echo "‚úÖ Container security compliance report generated"
                  echo "üìÅ Report: /harness/reports/container-security-report.json"
                  echo "üîÑ Next mandatory scan: $(date -d '+7 days' -Iseconds)"
                  
                  # Validation finale
                  echo ""
                  echo "üõ°Ô∏è  CONTAINER SECURITY VALIDATION COMPLETED"
                  echo "‚úÖ All security checks passed"
                  echo "‚úÖ Compliance requirements met"
                  echo "‚úÖ Container approved for deployment"
                resources:
                  limits:
                    memory: 256Mi
                    cpu: 200m

      # Variables d'environnement s√©curis√©es
      variables:
        - name: CONTAINER_SECURITY_MODE
          type: String
          value: "ENTERPRISE_HARDENED"
        - name: COMPLIANCE_FRAMEWORKS
          type: String
          value: "CIS_DOCKER,NIST_CONTAINER"
        - name: SCAN_RETENTION_DAYS
          type: String
          value: "90"
        - name: MAX_VULN_TOLERANCE
          type: String
          value: "10"

    delegateSelectors: <+input>

  description: |
    üõ°Ô∏è ENTERPRISE HARDENED CONTAINER SECURITY SCAN TEMPLATE v0.2
    
    This template implements comprehensive container security scanning with:
    ‚Ä¢ Multi-layer vulnerability detection (Trivy + Grype)
    ‚Ä¢ CIS Docker Benchmark compliance validation
    ‚Ä¢ Zero-tolerance policy for critical misconfigurations
    ‚Ä¢ Enterprise-grade security policies
    ‚Ä¢ Forensic-level audit trails
    ‚Ä¢ Non-privileged execution (except Docker Bench)
    
    üîí Security Features:
    - Hardened fail_on_severity defaults (medium)
    - Multi-scanner validation approach
    - Strict vulnerability thresholds (max 10 critical/high)
    - Docker security best practices validation
    - Comprehensive compliance reporting
    - Manual intervention on policy violations
    
    üìã Compliance Standards:
    - CIS Docker Benchmark
    - NIST Container Security Guidelines  
    - Docker Security Best Practices
    - Enterprise Security Policies
    
    ‚ö†Ô∏è  CRITICAL: This template enforces strict container security policies.
    Images failing security validation will be blocked from deployment.