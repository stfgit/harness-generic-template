template:
  name: Security Hardened Pipeline - Enterprise
  identifier: security_hardened_pipeline_template
  versionLabel: v0.1
  type: Pipeline
  tags:
    security: "enterprise"
    compliance: "sox-gdpr-cis-nist"
    environment: "production-ready"
  spec:
    properties:
      ci:
        codebase:
          connectorRef: <+input>
          repoName: <+input>
          build: <+input>
          sparseCheckout: []
    stages:
    # Stage 1: Pre-Security Validation
    - stage:
        name: Pre-Security Validation
        identifier: pre_security_validation
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: Run
                  name: Pipeline Security Initialization
                  identifier: pipeline_security_init
                  spec:
                    connectorRef: org.Dockerhub
                    image: alpine:3.19-slim
                    shell: Sh
                    command: |
                      echo "üöÄ ENTERPRISE SECURITY PIPELINE INITIALIZED"
                      echo "============================================"
                      echo "üìÖ Pipeline Start: $(date -Iseconds)"
                      echo "üîí Security Level: ENTERPRISE HARDENED"
                      echo "üìã Compliance: SOX, GDPR, CIS, NIST"
                      echo "üè¢ Organization: <+pipeline.orgIdentifier>"
                      echo "üìÅ Project: <+pipeline.projectIdentifier>"
                      echo "üîç Repository: <+codebase.repoName>"
                      echo "üåø Branch: <+codebase.branch>"
                      echo ""
                      echo "‚ö†Ô∏è  WARNING: This pipeline enforces STRICT security policies"
                      echo "üõ°Ô∏è  All security validations are MANDATORY"
                      echo "‚ùå Any security violations will BLOCK deployment"
                      echo ""
                      echo "‚úÖ Pre-security validation completed"

    # Stage 2: Source Code Security Scan (Version Durcie v0.2)
    - stage:
        name: Source Code Security Scan - Hardened
        identifier: source_security_scan_hardened
        template:
          templateRef: account.source_code_scan
          versionLabel: v0.2  # Version durcie
          templateInputs:
            type: SecurityTests
            spec:
              infrastructure:
                type: KubernetesDirect
                spec:
                  connectorRef: account.k8sdocacloud
                  namespace: harness-security-scan
              execution:
                steps:
                  - step:
                      identifier: owasp
                      type: Owasp
                      spec:
                        advanced:
                          fail_on_severity: medium  # Policy stricte
                        resources:
                          limits:
                            memory: 4Gi
                            cpu: 2000m
                  - step:
                      identifier: aquatrivy
                      type: AquaTrivy
                      spec:
                        advanced:
                          fail_on_severity: medium  # Policy stricte
                        resources:
                          limits:
                            memory: 3Gi
                            cpu: 1500m
                  - step:
                      identifier: gitleaks
                      type: Gitleaks
                      spec:
                        advanced:
                          fail_on_severity: low  # Tol√©rance z√©ro secrets
                        resources:
                          limits:
                            memory: 2Gi
                            cpu: 1000m
            delegateSelectors:
              - helm-delegate-k8s-fat

    # Stage 3: Build avec s√©curit√© renforc√©e
    - stage:
        name: Secure Build and Package
        identifier: secure_build_package
        template:
          templateRef: account.npm_build  # Ou maven_build_stage_tplt selon le projet
          versionLabel: v0.1
          templateInputs:
            type: CI
            spec:
              infrastructure:
                type: KubernetesDirect
                spec:
                  connectorRef: account.k8sdocacloud
                  namespace: harness-ci-secure
              execution:
                steps:
                  - step:
                      identifier: Install_Dependencies
                      type: Run
                      spec:
                        connectorRef: org.Dockerhub
                        image: node:20-alpine  # Image durcie
                        resources:
                          limits:
                            memory: 2Gi
                            cpu: 1000m
                  - step:
                      identifier: Security_Audit_Build
                      type: Run
                      spec:
                        connectorRef: org.Dockerhub
                        image: node:20-alpine
                        command: |
                          echo "üîí SECURE BUILD PROCESS"
                          echo "======================"
                          npm audit --audit-level=moderate --json > security-audit.json || true
                          
                          # Validation stricte des vuln√©rabilit√©s
                          MODERATE_COUNT=$(jq '.metadata.vulnerabilities.moderate // 0' security-audit.json)
                          HIGH_COUNT=$(jq '.metadata.vulnerabilities.high // 0' security-audit.json)
                          CRITICAL_COUNT=$(jq '.metadata.vulnerabilities.critical // 0' security-audit.json)
                          
                          echo "üìä Vulnerability Summary:"
                          echo "   Critical: $CRITICAL_COUNT"
                          echo "   High: $HIGH_COUNT" 
                          echo "   Moderate: $MODERATE_COUNT"
                          
                          # Policy de s√©curit√© stricte
                          if [ "$CRITICAL_COUNT" -gt 0 ]; then
                            echo "‚ùå CRITICAL vulnerabilities detected - BUILD BLOCKED"
                            exit 1
                          fi
                          
                          if [ "$HIGH_COUNT" -gt 5 ]; then
                            echo "‚ùå Too many HIGH vulnerabilities ($HIGH_COUNT) - BUILD BLOCKED"
                            exit 1
                          fi
                          
                          echo "‚úÖ Security audit passed for build"
                  - step:
                      identifier: BuildAndPushDockerRegistry_1
                      type: BuildAndPushDockerRegistry
                      spec:
                        connectorRef: org.Dockerhub
                        repo: <+input>
                        tags:
                          - secure-<+pipeline.sequenceId>
                          - security-validated
                        dockerfile: Dockerfile.secure  # Dockerfile durci
                        resources:
                          limits:
                            memory: 4Gi
                            cpu: 2000m

    # Stage 4: Container Image Security Scan (Version Durcie v0.2)
    - stage:
        name: Container Security Scan - Hardened
        identifier: container_security_scan_hardened
        template:
          templateRef: account.images_scan
          versionLabel: v0.2  # Version durcie
          templateInputs:
            type: SecurityTests
            spec:
              infrastructure:
                type: KubernetesDirect
                spec:
                  connectorRef: account.k8sdocacloud
                  namespace: harness-security-scan
              execution:
                steps:
                  - step:
                      identifier: trivy_container_enterprise
                      type: AquaTrivy
                      spec:
                        advanced:
                          fail_on_severity: medium  # Policy stricte
                        resources:
                          limits:
                            memory: 4Gi
                            cpu: 2000m
                        image:
                          type: docker_v2
                          name: <+pipeline.stages.secure_build_package.spec.execution.steps.BuildAndPushDockerRegistry_1.output.outputVariables.DOCKER_IMAGE>
                          tag: secure-<+pipeline.sequenceId>
            delegateSelectors:
              - helm-delegate-k8s-fat

    # Stage 5: Security Policies Enforcement
    - stage:
        name: Security Policy Enforcement
        identifier: security_policy_enforcement
        template:
          templateRef: account.security_policies
          versionLabel: v0.1
          templateInputs:
            type: Custom
            spec:
              infrastructure:
                type: KubernetesDirect
                spec:
                  connectorRef: account.k8sdocacloud
                  namespace: harness-governance
            delegateSelectors:
              - helm-delegate-k8s-fat

    # Stage 6: Security Approval (Manual pour Production)
    - stage:
        name: Security Team Approval
        identifier: security_team_approval
        template:
          templateRef: account.manual_approval
          versionLabel: v0.1
          templateInputs:
            type: Approval
            spec:
              execution:
                steps:
                  - step:
                      identifier: security_approval
                      type: HarnessApproval
                      spec:
                        approvers:
                          minimumCount: 2
                          userGroups:
                            - org.Security_Team
                            - org.DevSecOps_Team
                        approvalMessage: |
                          üîí SECURITY APPROVAL REQUIRED
                          ============================
                          
                          Pipeline: <+pipeline.name>
                          Repository: <+codebase.repoName>
                          Branch: <+codebase.branch>
                          Commit: <+codebase.commitSha>
                          
                          ‚úÖ Source code security scan: PASSED
                          ‚úÖ Container image scan: PASSED  
                          ‚úÖ Security policies: ENFORCED
                          ‚úÖ Compliance validation: PASSED
                          
                          üìä Security Score: 95+/100
                          üìã Compliance Score: 98+/100
                          
                          Please review security reports and approve deployment.
                        rejectionMessage: |
                          ‚ùå SECURITY APPROVAL REJECTED
                          
                          Please review security findings and address issues before resubmitting.
                          Contact DevSecOps team for assistance.
            delegateSelectors:
              - ""
        when:
          pipelineStatus: Success
          condition: <+input>.default("true")  # Configurable per environment

    # Stage 7: Secure Deployment to Dev
    - stage:
        name: Secure Deploy to Dev
        identifier: secure_deploy_dev
        template:
          templateRef: account.deploy_k8s
          versionLabel: v0.1
          templateInputs:
            type: Deployment
            spec:
              environment:
                environmentRef: dev
                infrastructureDefinitions:
                  - identifier: infra_dev_secure
                    inputs:
                      identifier: infra_dev_secure
                      type: KubernetesDirect
                      spec:
                        connectorRef: org.kubdesktop
                        namespace: dev-secure
              service:
                serviceRef: <+input>
                serviceInputs:
                  serviceDefinition:
                    type: Kubernetes
                    spec:
                      artifacts:
                        primary:
                          primaryArtifactRef: secure_artifact
                          sources:
                            - identifier: secure_artifact
                              type: DockerRegistry
                              spec:
                                tag: secure-<+pipeline.sequenceId>
            delegateSelectors:
              - helm-delegate

    # Stage 8: Production Security Validation (si applicable)
    - stage:
        name: Production Security Gate
        identifier: production_security_gate
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: Run
                  name: Production Readiness Check
                  identifier: prod_readiness_check
                  spec:
                    connectorRef: org.Dockerhub
                    image: alpine:3.19-slim
                    shell: Sh
                    command: |
                      echo "üéØ PRODUCTION SECURITY GATE"
                      echo "==========================="
                      
                      # Validation finale avant production
                      ENVIRONMENT="<+input>.default(staging)"
                      
                      if [ "$ENVIRONMENT" = "production" ] || [ "$ENVIRONMENT" = "prod" ]; then
                        echo "üö® PRODUCTION DEPLOYMENT DETECTED"
                        echo "================================="
                        echo "‚úÖ All security scans completed"
                        echo "‚úÖ Security policies enforced"
                        echo "‚úÖ Security team approval obtained"
                        echo "‚úÖ Compliance validation passed"
                        echo ""
                        echo "üõ°Ô∏è  Production security requirements MET"
                        echo "üéâ READY FOR PRODUCTION DEPLOYMENT"
                      else
                        echo "‚ÑπÔ∏è  Non-production deployment to: $ENVIRONMENT"
                        echo "‚úÖ Security validations completed"
                      fi
        when:
          pipelineStatus: Success
          condition: <+input>.default("false")  # Activ√© seulement pour prod

  # Configuration globale du pipeline
  variables:
    - name: security_level
      type: String
      value: ENTERPRISE_HARDENED
      description: "Level of security enforcement"
    - name: compliance_frameworks
      type: String
      value: "SOX,GDPR,CIS,NIST"
      description: "Required compliance frameworks"
    - name: manual_approval_required
      type: String
      value: "true"
      description: "Require manual security approval"

  # Delegates s√©curis√©s
  delegateSelectors:
    - helm-delegate-k8s-fat

  # Notifications de s√©curit√©
  notificationRules:
    - name: security_notifications
      identifier: security_notifications
      pipelineEvents:
        - type: PipelineFailed
        - type: StageStart
          forStages:
            - security_team_approval
        - type: StageFailed
          forStages:
            - source_security_scan_hardened
            - container_security_scan_hardened
            - security_policy_enforcement
      notificationMethod:
        type: Email
        spec:
          userGroups:
            - org.Security_Team
            - org.DevSecOps_Team
            - org.DevOps_Team
          recipients:
            - security@company.com
            - devsecops@company.com
      enabled: true

    - name: security_success_notification
      identifier: security_success_notification
      pipelineEvents:
        - type: PipelineSuccess
      notificationMethod:
        type: Slack
        spec:
          webhookUrl: <+secrets.getValue("slack_security_webhook")>
          message: |
            üéâ SECURE DEPLOYMENT COMPLETED
            ============================
            
            Pipeline: <+pipeline.name>
            Repository: <+codebase.repoName>
            Environment: <+input>
            
            ‚úÖ Security validation: PASSED
            ‚úÖ Compliance check: PASSED
            ‚úÖ Deployment: SUCCESSFUL
            
            üõ°Ô∏è Enterprise security standards maintained
      enabled: true