template:
  name: npm build and push docker - flexible workspace
  identifier: npm_build
  versionLabel: v0.2
  type: Stage
  tags:
    npm: ""
    build: ""
    docker: ""
    flexible: ""
  spec:
    type: CI
    spec:
      cloneCodebase: true
      infrastructure:
        type: KubernetesDirect
        spec:
          connectorRef: <+input>
          namespace: <+input>.default(harness-ci)
          automountServiceAccountToken: true
          nodeSelector: {}
          os: Linux
      execution:
        steps:
          - step:
              type: Run
              name: Workspace Validation
              identifier: Workspace_Validation
              spec:
                connectorRef: <+input>
                image: <+input>.default(node:20)
                shell: Sh
                command: |-
                  WORKING_DIR="<+input>.default(.)"
                  echo "üîç WORKSPACE VALIDATION"
                  echo "======================="
                  echo "üìÅ Working Directory: ${WORKING_DIR}"
                  echo "üìÖ Scan Start: $(date -Iseconds)"
                  
                  # Navigate to working directory
                  if [ "${WORKING_DIR}" != "." ]; then
                    echo "üìÇ Navigating to working directory: ${WORKING_DIR}"
                    if [ ! -d "${WORKING_DIR}" ]; then
                      echo "‚ùå Working directory '${WORKING_DIR}' does not exist"
                      exit 1
                    fi
                    cd "${WORKING_DIR}"
                  fi
                  
                  # Validate package.json exists
                  if [ ! -f "package.json" ]; then
                    echo "‚ùå package.json not found in ${PWD}"
                    exit 1
                  fi
                  
                  echo "‚úÖ package.json found in ${PWD}"
                  echo "üì¶ Project Info:"
                  if command -v jq >/dev/null 2>&1; then
                    jq -r '. | "   Name: " + (.name // "N/A") + "\n   Version: " + (.version // "N/A")' package.json 2>/dev/null || echo "   Could not parse package.json"
                  else
                    echo "   $(head -10 package.json | grep -E '"(name|version)"' || echo "   Package info not readable")"
                  fi
                  
                  echo "‚úÖ Workspace validation completed"
                resources:
                  limits:
                    memory: <+input>.default(512Mi)
                    cpu: <+input>.default(500m)
                  requests:
                    memory: <+input>.default(256Mi)
                    cpu: <+input>.default(250m)
          
          - step:
              type: Run
              name: Install Dependencies
              identifier: Install_Dependencies
              spec:
                connectorRef: <+input>
                image: <+input>.default(node:20)
                shell: Sh
                command: |-
                  WORKING_DIR="<+input>.default(.)"
                  echo "üì¶ INSTALLING DEPENDENCIES"
                  echo "=========================="
                  
                  # Navigate to working directory
                  if [ "${WORKING_DIR}" != "." ]; then
                    echo "üìÇ Working in directory: ${WORKING_DIR}"
                    cd "${WORKING_DIR}"
                  fi
                  
                  echo "üßπ Cleaning npm cache..."
                  npm cache clean --force
                  
                  echo "‚¨áÔ∏è  Installing dependencies..."
                  <+input>.default(npm install --prefer-offline --no-audit --no-fund)
                  
                  echo "üîç Verifying installation..."
                  if command -v next >/dev/null 2>&1; then
                    echo "‚úÖ Next.js version: $(npx next --version 2>/dev/null || echo 'Next.js not available')"
                  fi
                  
                  if [ -d "node_modules" ]; then
                    echo "‚úÖ Dependencies installed successfully"
                    echo "üìä Dependency stats: $(ls node_modules | wc -l) packages installed"
                  else
                    echo "‚ö†Ô∏è  node_modules directory not found"
                  fi
                resources:
                  limits:
                    memory: <+input>.default(2Gi)
                    cpu: <+input>.default(1000m)
                  requests:
                    memory: <+input>.default(1Gi)
                    cpu: <+input>.default(500m)
          
          - step:
              type: Run
              name: Code Quality Check
              identifier: Code_Quality_Check
              spec:
                connectorRef: <+input>
                image: <+input>.default(node:20)
                shell: Sh
                command: |-
                  WORKING_DIR="<+input>.default(.)"
                  echo "üîç CODE QUALITY CHECK"
                  echo "===================="
                  
                  # Navigate to working directory
                  if [ "${WORKING_DIR}" != "." ]; then
                    echo "üìÇ Working in directory: ${WORKING_DIR}"
                    cd "${WORKING_DIR}"
                  fi
                  
                  # Check if lint script exists
                  LINT_COMMAND="<+input>.default(npm run lint)"
                  if grep -q '"lint"' package.json 2>/dev/null; then
                    echo "üßπ Running linting..."
                    eval "${LINT_COMMAND}"
                    echo "‚úÖ Linting completed successfully"
                  else
                    echo "‚ö†Ô∏è  No lint script found in package.json, skipping linting"
                    echo "üí° Consider adding a lint script for better code quality"
                  fi
                resources:
                  limits:
                    memory: <+input>.default(1Gi)
                    cpu: <+input>.default(500m)
                  requests:
                    memory: <+input>.default(512Mi)
                    cpu: <+input>.default(250m)
              when:
                stageStatus: Success
                condition: <+input>.default("true")
          
          - step:
              type: Run
              name: Build Application
              identifier: Build_Application
              spec:
                connectorRef: <+input>
                image: <+input>.default(node:20)
                shell: Sh
                command: |-
                  WORKING_DIR="<+input>.default(.)"
                  echo "üî® BUILDING APPLICATION"
                  echo "======================"
                  
                  # Navigate to working directory
                  if [ "${WORKING_DIR}" != "." ]; then
                    echo "üìÇ Working in directory: ${WORKING_DIR}"
                    cd "${WORKING_DIR}"
                  fi
                  
                  # Check if build script exists
                  BUILD_COMMAND="<+input>.default(npm run build)"
                  if grep -q '"build"' package.json 2>/dev/null; then
                    echo "üèóÔ∏è  Running build..."
                    eval "${BUILD_COMMAND}"
                    echo "‚úÖ Build completed successfully"
                    
                    # Show build artifacts
                    if [ -d ".next" ]; then
                      echo "üìÅ Next.js build artifacts:"
                      ls -la .next/ | head -10
                    elif [ -d "dist" ]; then
                      echo "üìÅ Build artifacts in dist/:"
                      ls -la dist/ | head -10
                    elif [ -d "build" ]; then
                      echo "üìÅ Build artifacts in build/:"
                      ls -la build/ | head -10
                    else
                      echo "üì¶ Build completed (no standard build directory found)"
                    fi
                  else
                    echo "‚ö†Ô∏è  No build script found in package.json"
                    echo "üí° Skipping build step - ensure your Dockerfile handles the build process"
                  fi
                resources:
                  limits:
                    memory: <+input>.default(4Gi)
                    cpu: <+input>.default(2000m)
                  requests:
                    memory: <+input>.default(2Gi)
                    cpu: <+input>.default(1000m)
          
          - step:
              type: Run
              name: Run Tests
              identifier: Run_Tests
              spec:
                connectorRef: <+input>
                image: <+input>.default(node:20)
                shell: Sh
                command: |-
                  WORKING_DIR="<+input>.default(.)"
                  echo "üß™ RUNNING TESTS"
                  echo "==============="
                  
                  # Navigate to working directory
                  if [ "${WORKING_DIR}" != "." ]; then
                    echo "üìÇ Working in directory: ${WORKING_DIR}"
                    cd "${WORKING_DIR}"
                  fi
                  
                  # Check for various test scripts
                  TEST_COMMAND="<+input>.default(npm run test:ci)"
                  
                  if grep -q '"test:ci"' package.json 2>/dev/null; then
                    echo "üöÄ Running CI tests..."
                    eval "${TEST_COMMAND}"
                  elif grep -q '"test"' package.json 2>/dev/null; then
                    echo "üöÄ Running standard tests..."
                    npm run test -- --passWithNoTests --watchAll=false
                  else
                    echo "‚ö†Ô∏è  No test scripts found in package.json"
                    echo "üí° Consider adding test scripts for better quality assurance"
                    echo "‚úÖ Proceeding without tests (ensure Dockerfile testing is adequate)"
                  fi
                  
                  echo "‚úÖ Test phase completed"
                resources:
                  limits:
                    memory: <+input>.default(2Gi)
                    cpu: <+input>.default(1000m)
                  requests:
                    memory: <+input>.default(1Gi)
                    cpu: <+input>.default(500m)
              when:
                stageStatus: Success
                condition: <+input>.default("true")
          
          - step:
              type: Run
              name: Security Audit
              identifier: Security_Audit
              spec:
                connectorRef: <+input>
                image: <+input>.default(node:20)
                shell: Sh
                command: |-
                  WORKING_DIR="<+input>.default(.)"
                  echo "üîí NPM SECURITY AUDIT"
                  echo "===================="
                  
                  # Navigate to working directory
                  if [ "${WORKING_DIR}" != "." ]; then
                    echo "üìÇ Working in directory: ${WORKING_DIR}"
                    cd "${WORKING_DIR}"
                  fi
                  
                  AUDIT_LEVEL="<+input>.default(high)"
                  echo "üîç Running security audit (level: ${AUDIT_LEVEL})..."
                  
                  # Run audit with configurable level
                  npm audit --audit-level="${AUDIT_LEVEL}" --json > audit-results.json || AUDIT_EXIT_CODE=$?
                  
                  if [ -f "audit-results.json" ]; then
                    # Parse and display results
                    if command -v jq >/dev/null 2>&1; then
                      CRITICAL=$(jq -r '.metadata.vulnerabilities.critical // 0' audit-results.json 2>/dev/null || echo "0")
                      HIGH=$(jq -r '.metadata.vulnerabilities.high // 0' audit-results.json 2>/dev/null || echo "0")
                      MODERATE=$(jq -r '.metadata.vulnerabilities.moderate // 0' audit-results.json 2>/dev/null || echo "0")
                      
                      echo "üìä Vulnerability Summary:"
                      echo "   üî¥ Critical: ${CRITICAL}"
                      echo "   üü† High: ${HIGH}"
                      echo "   üü° Moderate: ${MODERATE}"
                    fi
                  fi
                  
                  # Exit based on audit level and results
                  if [ "${AUDIT_EXIT_CODE:-0}" -ne 0 ] && [ "<+input>.default(false)" = "true" ]; then
                    echo "‚ùå Security audit failed with critical vulnerabilities"
                    exit 1
                  else
                    echo "‚úÖ Security audit completed (warnings noted)"
                  fi
                resources:
                  limits:
                    memory: <+input>.default(1Gi)
                    cpu: <+input>.default(500m)
              when:
                stageStatus: Success
                condition: <+input>.default("true")
          
          - step:
              type: BuildAndPushDockerRegistry
              name: Build and Push Docker Image
              identifier: BuildAndPushDockerRegistry_1
              spec:
                connectorRef: <+input>
                repo: <+input>
                tags:
                  - <+pipeline.sequenceId>
                  - latest
                caching: true
                dockerfile: <+input>.default(Dockerfile)
                context: <+input>.default(.)
                optimize: true
                buildArgs:
                  WORKING_DIR: <+input>.default(.)
                resources:
                  limits:
                    memory: <+input>.default(4Gi)
                    cpu: <+input>.default(1500m)
                  requests:
                    memory: <+input>.default(2Gi)
                    cpu: <+input>.default(1000m)
              when:
                stageStatus: Success
      
      # Enhanced shared paths for different project structures
      sharedPaths:
        - /harness/node_modules
        - /harness/.next
        - /harness/.npm
        - /harness/dist
        - /harness/build
      
      # Variables for template configuration
      variables:
        - name: WORKING_DIRECTORY
          type: String
          value: <+input>.default(.)
        - name: NODE_VERSION
          type: String
          value: <+input>.default(20)
        - name: BUILD_MODE
          type: String
          value: <+input>.default(production)
      
      caching:
        enabled: false
        paths: []
      buildIntelligence:
        enabled: false

  # Template inputs documentation
  description: |
    üöÄ NPM BUILD TEMPLATE v0.2 - FLEXIBLE WORKSPACE SUPPORT
    
    This enhanced template supports npm projects in any directory structure:
    
    üìÅ SUPPORTED STRUCTURES:
    ‚Ä¢ Root-level projects (workingDirectory: ".")
    ‚Ä¢ Subdirectory projects (workingDirectory: "frontend/", "client/", etc.)
    ‚Ä¢ Monorepo subprojects (workingDirectory: "packages/app/")
    
    üîß CONFIGURABLE INPUTS:
    ‚Ä¢ workingDirectory: Target directory for npm operations (default: ".")
    ‚Ä¢ installCommand: Custom install command (default: npm install --prefer-offline --no-audit --no-fund)
    ‚Ä¢ lintCommand: Custom lint command (default: npm run lint)
    ‚Ä¢ buildCommand: Custom build command (default: npm run build)
    ‚Ä¢ testCommand: Custom test command (default: npm run test:ci)
    ‚Ä¢ dockerfile: Path to Dockerfile relative to repo root (default: Dockerfile)
    ‚Ä¢ dockerContext: Docker build context (default: .)
    ‚Ä¢ auditLevel: NPM audit severity level (default: high)
    ‚Ä¢ failOnAudit: Fail pipeline on audit issues (default: false)
    ‚Ä¢ skipLint: Skip linting step (default: false)
    ‚Ä¢ skipTests: Skip testing step (default: false)
    ‚Ä¢ skipAudit: Skip security audit (default: false)
    
    üîí FEATURES:
    ‚Ä¢ Workspace validation and navigation
    ‚Ä¢ Flexible command configuration via template inputs
    ‚Ä¢ Enhanced error handling and logging
    ‚Ä¢ Security audit with configurable thresholds
    ‚Ä¢ Resource optimization based on project size
    ‚Ä¢ Backward compatibility with v0.1
    
    üí° USAGE EXAMPLES:
    
    Root project:
      workingDirectory: "."
      
    Frontend subdirectory:
      workingDirectory: "frontend/"
      dockerfile: "frontend/Dockerfile"
      dockerContext: "frontend/"
      
    Monorepo package:
      workingDirectory: "packages/web-app/"
      buildCommand: "npm run build:prod"
      testCommand: "npm run test:coverage"