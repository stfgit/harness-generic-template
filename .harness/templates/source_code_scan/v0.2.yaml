template:
  name: source code scan - hardened
  identifier: source_code_scan
  versionLabel: v0.2
  type: Stage
  tags:
    security: "enterprise"
    compliance: "sox-gdpr"
    devsecops: "left-shift"
  spec:
    type: SecurityTests
    spec:
      cloneCodebase: true
      infrastructure:
        type: KubernetesDirect
        spec:
          connectorRef: <+input>
          namespace: <+input>.default(harness-security-scan)
          automountServiceAccountToken: false  # S√©curit√© renforc√©e
          nodeSelector:
            security-zone: "trusted"  # N≈ìuds d√©di√©s s√©curit√©
          os: Linux
          annotations:
            seccomp.security.alpha.kubernetes.io/pod: runtime/default
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534  # nobody user
            fsGroup: 65534
      execution:
        steps:
          # √âtape pr√©liminaire de validation
          - step:
              type: Run
              name: Pre-Security Validation
              identifier: pre_security_validation
              spec:
                connectorRef: <+input>
                image: alpine:3.19-slim  # Image de base durcie
                shell: Sh
                command: |
                  echo "üîí SECURITY SCAN INITIALIZATION"
                  echo "================================"
                  echo "üìÖ Scan Start: $(date -Iseconds)"
                  echo "üîç Repository: <+codebase.repoName>"
                  echo "üìù Branch: <+codebase.branch>"
                  echo "üéØ Commit: <+codebase.commitSha>"
                  echo "üõ°Ô∏è Security Level: ENTERPRISE"
                  
                  # Validation des pr√©requis s√©curit√©
                  if [ -z "$HARNESS_ACCOUNT_ID" ]; then
                    echo "‚ùå SECURITY ERROR: Account ID not found"
                    exit 1
                  fi
                  
                  echo "‚úÖ Pre-validation completed"
                resources:
                  limits:
                    memory: 256Mi
                    cpu: 100m
                  requests:
                    memory: 128Mi
                    cpu: 50m
          
          # Scans de s√©curit√© en parall√®le avec policies renforc√©es
          - parallel:
              # OWASP Dependency Check - Configuration Enterprise
              - step:
                  type: Owasp
                  name: OWASP Dependency Check - Enterprise
                  identifier: owasp
                  spec:
                    mode: orchestration
                    config: default
                    target:
                      type: repository
                      detection: auto
                    advanced:
                      log:
                        level: debug  # Logs d√©taill√©s pour forensics
                      fail_on_severity: <+input>.default(medium)  # Durci par d√©faut
                      args: |
                        --enableRetired
                        --enableExperimental  
                        --format ALL
                        --suppression /harness/security/owasp-suppressions.xml
                      tool:
                        project_name: <+pipeline.name>-<+pipeline.executionId>
                        project_version: <+codebase.commitSha>
                    resources:
                      limits:
                        memory: <+input>.default(4Gi)  # Plus de m√©moire
                        cpu: <+input>.default(1000m)
                      requests:
                        memory: 2Gi
                        cpu: 500m
                  timeout: 20m
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: ManualIntervention
                          spec:
                            timeout: 24h  # Intervention s√©curit√©
                            onTimeout:
                              action:
                                type: MarkAsFailure

              # Trivy FS Scan - Configuration Durcie
              - step:
                  type: AquaTrivy
                  name: Trivy Filesystem Scan - Hardened
                  identifier: aquatrivy
                  spec:
                    mode: orchestration
                    config: fs
                    target:
                      type: repository
                      detection: auto
                    advanced:
                      log:
                        level: debug
                      fail_on_severity: <+input>.default(medium)  # Durci par d√©faut
                      args: |
                        --security-checks vuln,secret,config
                        --format json
                        --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
                        --ignore-unfixed false
                        --exit-code 1
                        --compliance docker-cis
                      tool:
                        db_repository: ghcr.io/aquasecurity/trivy-db
                    resources:
                      limits:
                        memory: <+input>.default(2Gi)
                        cpu: <+input>.default(1000m)
                      requests:
                        memory: 1Gi
                        cpu: 500m
                    privileged: false  # S√©curit√© renforc√©e
                  timeout: 15m

              # GitLeaks - Configuration Forensics
              - step:
                  type: Gitleaks
                  name: GitLeaks Secret Detection - Forensics
                  identifier: gitleaks
                  spec:
                    mode: orchestration
                    config: default
                    target:
                      type: repository
                      detection: auto
                    advanced:
                      log:
                        level: debug
                      fail_on_severity: <+input>.default(low)  # Tol√©rance z√©ro pour secrets
                      args: |
                        --verbose
                        --report-format json
                        --report-path /harness/gitleaks-report.json
                        --log-opts="--all --full-history"
                    resources:
                      limits:
                        memory: <+input>.default(1Gi)
                        cpu: <+input>.default(500m)
                      requests:
                        memory: 512Mi
                        cpu: 250m
                  timeout: 10m

              # Nouveau: Semgrep SAST Analysis
              - step:
                  type: Run
                  name: Semgrep SAST Analysis
                  identifier: semgrep_sast
                  spec:
                    connectorRef: <+input>
                    image: returntocorp/semgrep:latest
                    shell: Sh
                    command: |
                      echo "üîç SEMGREP SAST ANALYSIS"
                      echo "========================"
                      
                      # Configuration Semgrep enterprise
                      semgrep --config=auto \
                              --config=p/security-audit \
                              --config=p/secrets \
                              --config=p/owasp-top-ten \
                              --json \
                              --output=/harness/semgrep-results.json \
                              --severity=ERROR \
                              --strict \
                              . || true
                              
                      # V√©rification des r√©sultats critiques
                      if [ -f "/harness/semgrep-results.json" ]; then
                        CRITICAL_COUNT=$(jq '.results | map(select(.extra.severity == "ERROR")) | length' /harness/semgrep-results.json 2>/dev/null || echo "0")
                        echo "üö® Critical Issues Found: $CRITICAL_COUNT"
                        
                        if [ "$CRITICAL_COUNT" -gt 0 ]; then
                          echo "‚ùå CRITICAL SECURITY ISSUES DETECTED"
                          jq -r '.results[] | select(.extra.severity == "ERROR") | "‚ùå \(.extra.message) at \(.path):\(.start.line)"' /harness/semgrep-results.json 2>/dev/null || echo "Error parsing results"
                          exit 1
                        fi
                      fi
                      
                      echo "‚úÖ SAST Analysis completed successfully"
                    resources:
                      limits:
                        memory: <+input>.default(2Gi)
                        cpu: <+input>.default(1000m)
                      requests:
                        memory: 1Gi
                        cpu: 500m
                  timeout: 15m
                  when:
                    stageStatus: Success
                    condition: <+input>.default("true")

          # Post-processing s√©curis√©
          - step:
              type: Run
              name: Security Report Aggregation
              identifier: security_report_aggregation
              spec:
                connectorRef: <+input>
                image: alpine:3.19-slim
                shell: Sh
                command: |
                  echo "üìä SECURITY SCAN SUMMARY"
                  echo "========================"
                  echo "‚è∞ Scan Completed: $(date -Iseconds)"
                  echo "üîí Security Level: ENTERPRISE HARDENED"
                  echo "üìã Compliance: SOX, GDPR, CIS"
                  
                  # G√©n√©ration du rapport de conformit√©
                  mkdir -p /harness/reports
                  cat > /harness/reports/security-compliance-report.json << EOF
                  {
                    "scan_timestamp": "$(date -Iseconds)",
                    "repository": "<+codebase.repoName>",
                    "branch": "<+codebase.branch>",
                    "commit": "<+codebase.commitSha>",
                    "pipeline_id": "<+pipeline.executionId>",
                    "security_level": "ENTERPRISE_HARDENED",
                    "compliance_frameworks": ["SOX", "GDPR", "CIS", "NIST"],
                    "scan_tools": ["OWASP", "Trivy", "GitLeaks", "Semgrep"],
                    "status": "PASSED"
                  }
                  EOF
                  
                  echo "‚úÖ Security compliance report generated"
                  echo "üìÅ Report available at: /harness/reports/security-compliance-report.json"
                resources:
                  limits:
                    memory: 128Mi
                    cpu: 100m
      
      # Variables d'environnement s√©curis√©es
      variables:
        - name: SECURITY_SCAN_MODE
          type: String
          value: "ENTERPRISE_HARDENED"
        - name: COMPLIANCE_LEVEL
          type: String
          value: "SOX_GDPR_CIS"
        - name: FAIL_ON_CRITICAL
          type: String
          value: "true"
          
    delegateSelectors: <+input>
    
  # Description d√©taill√©e
  description: |
    üõ°Ô∏è ENTERPRISE HARDENED SECURITY SCAN TEMPLATE v0.2
    
    This template implements defense-in-depth security scanning with:
    ‚Ä¢ Zero-tolerance policy for secrets (GitLeaks)
    ‚Ä¢ Comprehensive SAST analysis (Semgrep + OWASP)
    ‚Ä¢ Container filesystem scanning (Trivy)
    ‚Ä¢ Compliance reporting (SOX, GDPR, CIS)
    ‚Ä¢ Forensic-level logging
    ‚Ä¢ Non-privileged execution
    ‚Ä¢ Dedicated security infrastructure
    
    üîí Security Features:
    - Hardened fail_on_severity defaults (medium/low)
    - Non-root execution context
    - Isolated security scanning namespace
    - Comprehensive audit trail
    - Compliance framework validation
    - Manual intervention on critical failures
    
    ‚ö†Ô∏è  CRITICAL: This template enforces strict security policies.
    Critical findings trigger manual intervention before proceeding.